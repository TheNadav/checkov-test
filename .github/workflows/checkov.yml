name: Checkov IaC Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  checkov-scan:
    name: Checkov Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov with severity filtering
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          output_format: sarif,json
          output_file_path: checkov-results.sarif,checkov-results.json
          soft_fail: false
          hard_fail_on: HIGH,CRITICAL
          quiet: true

      - name: Upload SARIF to Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: checkov-results.sarif

      - name: Generate PR Comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');

            let checkovResults;
            try {
              checkovResults = JSON.parse(fs.readFileSync('checkov-results.json', 'utf8'));
            } catch (error) {
              console.log('No Checkov results file found');
              return;
            }

            const summary = checkovResults.summary || {};
            const passed = summary.passed || 0;
            const failed = summary.failed || 0;
            const skipped = summary.skipped || 0;

            let criticalCount = 0;
            let highCount = 0;
            let mediumCount = 0;
            let lowCount = 0;

            const failedChecks = checkovResults.results?.failed_checks || [];

            failedChecks.forEach(check => {
              const severity = (check.check_class || '').toLowerCase();
              if (severity.includes('critical')) criticalCount++;
              else if (severity.includes('high')) highCount++;
              else if (severity.includes('medium')) mediumCount++;
              else if (severity.includes('low')) lowCount++;
            });

            let comment = `## üõ°Ô∏è Checkov IaC Security Scan Results\n\n`;
            comment += `### Summary\n`;
            comment += `| Status | Count |\n`;
            comment += `|--------|-------|\n`;
            comment += `| ‚úÖ Passed | ${passed} |\n`;
            comment += `| ‚ùå Failed | ${failed} |\n`;
            comment += `| ‚è≠Ô∏è Skipped | ${skipped} |\n\n`;

            comment += `### Findings by Severity\n`;
            comment += `| Severity | Count |\n`;
            comment += `|----------|-------|\n`;
            comment += `| üî¥ Critical | ${criticalCount} |\n`;
            comment += `| üü† High | ${highCount} |\n`;
            comment += `| üü° Medium | ${mediumCount} |\n`;
            comment += `| üü¢ Low | ${lowCount} |\n\n`;

            if (criticalCount > 0 || highCount > 0) {
              comment += `### ‚ö†Ô∏è Critical & High Severity Issues\n\n`;

              const criticalAndHigh = failedChecks
                .filter(check => {
                  const severity = (check.check_class || '').toLowerCase();
                  return severity.includes('critical') || severity.includes('high');
                })
                .slice(0, 10);

              criticalAndHigh.forEach(check => {
                const severity = (check.check_class || '').toLowerCase().includes('critical') ? 'üî¥ CRITICAL' : 'üü† HIGH';
                comment += `#### ${severity}: ${check.check_id}\n`;
                comment += `**File:** \`${check.file_path}:${check.file_line_range?.[0] || 'N/A'}\`\n`;
                comment += `**Resource:** \`${check.resource}\`\n`;
                comment += `**Description:** ${check.check_name}\n`;
                if (check.guideline) {
                  comment += `**Remediation:** ${check.guideline}\n`;
                }
                comment += `\n`;
              });

              if (failedChecks.length > 10) {
                comment += `\n_... and ${failedChecks.length - 10} more issues. Check the Security tab for full details._\n\n`;
              }
            }

            if (criticalCount > 0 || highCount > 0) {
              comment += `\n---\n`;
              comment += `‚ùå **Build Status:** FAILED - Critical or High severity issues found!\n`;
              comment += `\nüí° **Next Steps:** Fix the critical and high severity issues above before merging.\n`;
            } else if (failed > 0) {
              comment += `\n---\n`;
              comment += `‚ö†Ô∏è **Build Status:** PASSED with warnings - Only low/medium severity issues found.\n`;
              comment += `\nüí° Consider fixing these issues to improve security posture.\n`;
            } else {
              comment += `\n---\n`;
              comment += `‚úÖ **Build Status:** PASSED - No security issues found!\n`;
            }

            comment += `\nüìä View detailed results in the [Security tab](https://github.com/${{ github.repository }}/security/code-scanning)`;

            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üõ°Ô∏è Checkov IaC Security Scan Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }