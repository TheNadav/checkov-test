name: Checkov IaC Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  checkov_scan:
    name: Checkov Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Run Checkov Scan
        id: checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: .
          framework: terraform
          output_format: sarif,json
          output_file_path: results.sarif,results.json
          hard_fail_on: HIGH,CRITICAL
        continue-on-error: true

      - name: Upload SARIF to Security Tab
        if: success() || failure()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

      - name: Post PR Comment Summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const { GITHUB_REPOSITORY, GITHUB_SERVER_URL } = process.env;

            const results = JSON.parse(fs.readFileSync('results.json', 'utf8'));
            const summary = results.summary;

            let statusMessage;
            if (summary.failed > 0) {
              statusMessage = `‚ö†Ô∏è **Checkov found ${summary.failed} total issues.**`;
            } else {
              statusMessage = `‚úÖ **Checkov passed:** No issues found.`;
            }

            const commentBody = `
              ## üõ°Ô∏è Checkov IaC Scan Results

              ${statusMessage}

              ### Overall Summary
              | Status | Count |
              |:---|:---:|
              | ‚úÖ Passed | ${summary.passed} |
              | ‚ùå Failed | ${summary.failed} |
              | ‚è≠Ô∏è Skipped | ${summary.skipped} |

              ---
              *Detailed findings are available in the [Security tab](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/security/code-scanning).*
            `;

            const { owner, repo } = context.repo;
            const issue_number = context.issue.number;

            const { data: comments } = await github.rest.issues.listComments({
              owner, repo, issue_number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('üõ°Ô∏è Checkov IaC Scan Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner, repo,
                comment_id: botComment.id,
                body: commentBody
              });
            } else {
              await github.rest.issues.createComment({
                owner, repo, issue_number,
                body: commentBody
              });
            }

